{"version":3,"sources":["store/actions/alertActions.ts","store/types.ts","components/Search.tsx","store/actions/weatherActions.ts","components/Header.tsx","components/Weather.tsx","components/Alert.tsx","App.tsx","store/reducers/weatherReducer.ts","store/reducers/alertReducer.ts","store/index.ts","index.tsx"],"names":["setAlert","message","type","payload","Search","dispatch","useDispatch","useState","city","setCity","className","onSubmit","e","preventDefault","trim","a","fetch","response","ok","json","resData","Error","getWeather","placeholder","value","onChange","target","style","maxWidth","Header","Weather","data","celsius","main","temp","toFixed","name","sys","country","weather","src","icon","alt","humidity","pressure","wind","speed","Alert","onClose","onClick","justifyContent","App","weatherData","useSelector","state","loading","error","alertMsg","alert","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e3b2ab4.chunk.js","sourcesContent":["import { AlertAction, SET_ALERT } from \"../types\";\r\n\r\nexport const setAlert = (message: string): AlertAction => {\r\n  return {\r\n    type: SET_ALERT,\r\n    payload: message,\r\n  };\r\n};\r\n","export const GET_WEATHER = \"GET_WEATHER\";\r\nexport const SET_LOADING = \"SET_LOADING\";\r\nexport const SET_ERROR = \"SET_ERROR\";\r\nexport const SET_ALERT = \"SET_ALERT\";\r\n\r\ninterface Weather {\r\n  main: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface WeatherData {\r\n  main: {\r\n    humidity: number;\r\n    pressure: number;\r\n    temp: number;\r\n  };\r\n  name: string;\r\n  sys: {\r\n    country: string;\r\n  };\r\n  weather: Weather[];\r\n  wind: {\r\n    speed: number;\r\n  };\r\n}\r\n\r\nexport interface WeatherError {\r\n  message: string;\r\n}\r\n\r\nexport interface WeatherState {\r\n  data: WeatherData | null;\r\n  loading: boolean;\r\n  error: string;\r\n}\r\n\r\ninterface GetWeatherAction {\r\n  type: typeof GET_WEATHER;\r\n  payload: WeatherData;\r\n}\r\n\r\ninterface SetLoadingAction {\r\n  type: typeof SET_LOADING;\r\n}\r\n\r\ninterface SetErrorAction {\r\n  type: typeof SET_ERROR;\r\n  payload: string;\r\n}\r\n\r\nexport type WeatherAction =\r\n  | GetWeatherAction\r\n  | SetLoadingAction\r\n  | SetErrorAction;\r\n\r\nexport interface AlertAction {\r\n  type: typeof SET_ALERT;\r\n  payload: string;\r\n}\r\n\r\nexport interface AlertState {\r\n  message: string;\r\n}\r\n","import React, { FC, useState, ChangeEvent, FormEvent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAlert } from \"../store/actions/alertActions\";\r\nimport { setLoading, getWeather } from \"../store/actions/weatherActions\";\r\n\r\nconst Search: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setCity(e.target.value);\r\n  };\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (city.trim() === \"\") return dispatch(setAlert(\"City is required\"));\r\n    dispatch(setLoading());\r\n    dispatch(getWeather(city));\r\n    setCity(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"hero is-light has-text-centered\">\r\n      <div className=\"hero-body\">\r\n        <form className=\"py-5\" onSubmit={handleSubmit}>\r\n          <input\r\n            className=\"input has-text-left\"\r\n            type=\"text\"\r\n            placeholder=\"e.g. Paris\"\r\n            value={city}\r\n            onChange={handleChange}\r\n            style={{ maxWidth: 300 }}\r\n          />\r\n          <button className=\"button is-primary ml-1\">Search</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { RootState } from \"..\";\r\nimport {\r\n  WeatherAction,\r\n  WeatherError,\r\n  WeatherData,\r\n  GET_WEATHER,\r\n  SET_ERROR,\r\n  SET_LOADING,\r\n} from \"../types\";\r\n\r\nexport const getWeather = (\r\n  city: string\r\n): ThunkAction<void, RootState, null, WeatherAction> => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const API_KEY = \"d3b6f780cc824038d39829f0f6a0d091\";\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const resData: WeatherError = await response.json();\r\n        throw new Error(resData.message);\r\n      }\r\n\r\n      const resData: WeatherData = await response.json();\r\n      dispatch({\r\n        type: GET_WEATHER,\r\n        payload: resData,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: SET_ERROR,\r\n        payload: error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const setLoading = (): WeatherAction => {\r\n  return {\r\n    type: SET_LOADING,\r\n  };\r\n};\r\n\r\nexport const setError = (): WeatherAction => {\r\n  return {\r\n    type: SET_ERROR,\r\n    payload: \"\",\r\n  };\r\n};\r\n","import React, { FC } from \"react\";\r\n\r\nconst Header: FC = () => {\r\n  return (\r\n    <section className=\"hero has-text-centered is-dark is-bold\">\r\n      <div className=\"hero-body\">\r\n        <h1 className=\"title mb-3\">Weather App</h1>\r\n        <h2 className=\"subtitle mt-0\">\r\n          Enter city name and press search button.\r\n        </h2>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { FC } from \"react\";\r\nimport { WeatherData } from \"../store/types\";\r\n\r\ninterface WeatherProps {\r\n  data: WeatherData;\r\n}\r\n\r\nconst Weather: FC<WeatherProps> = ({ data }) => {\r\n  const celsius = (data.main.temp - 273.15).toFixed(1);\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <h1 className=\"title has-text-centered weather-title\">\r\n        {data.name} - {data.sys.country}\r\n      </h1>\r\n      <div className=\"level\">\r\n        <div className=\"level-item has-text-centered\">\r\n          <div>\r\n            <p className=\"heading\">{data.weather[0].main}</p>\r\n            <p className=\"title\">\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n                alt=\"\"\r\n              />\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"level-item has-text-centered\">\r\n          <div>\r\n            <p className=\"heading\">temp</p>\r\n            <p className=\"title\">\r\n              {celsius} <sup>&#8451;</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"level-item has-text-centered\">\r\n          <div>\r\n            <p className=\"heading\">humidity</p>\r\n            <p className=\"title\">\r\n              {data.main.humidity} <sup>%</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"level-item has-text-centered\">\r\n          <div>\r\n            <p className=\"heading\">pressure</p>\r\n            <p className=\"title\">\r\n              {data.main.pressure} <sup>hPa</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"level-item has-text-centered\">\r\n          <div>\r\n            <p className=\"heading\">wind</p>\r\n            <p className=\"title\">\r\n              {data.wind.speed} <sup>m/s</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { FC } from \"react\";\r\n\r\ninterface AlertProps {\r\n  message: string;\r\n  onClose: () => void;\r\n}\r\n\r\nconst Alert: FC<AlertProps> = ({ message, onClose }) => {\r\n  return (\r\n    <div className=\"modal is-active has-text-centered\">\r\n      <div className=\"modal-background\" onClick={onClose}></div>\r\n      <div className=\"modal-card\">\r\n        <header className=\"modal-card-head has-background-danger\">\r\n          <p className=\"modal-card-title has-text-white is-uppercase\">\r\n            {message}\r\n          </p>\r\n        </header>\r\n        <footer\r\n          className=\"modal-card-foot\"\r\n          style={{ justifyContent: \"center\" }}\r\n        >\r\n          <button className=\"button\" onClick={onClose}>\r\n            Close\r\n          </button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Search from \"./components/Search\";\r\nimport Header from \"./components/Header\";\r\nimport Weather from \"./components/Weather\";\r\nimport Alert from \"./components/Alert\";\r\nimport \"bulma/css/bulma.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport { RootState } from \"./store\";\r\nimport { setAlert } from \"./store/actions/alertActions\";\r\nimport { setError } from \"./store/actions/weatherActions\";\r\n\r\nconst App: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const weatherData = useSelector((state: RootState) => state.weather.data);\r\n  const loading = useSelector((state: RootState) => state.weather.loading);\r\n  const error = useSelector((state: RootState) => state.weather.error);\r\n  const alertMsg = useSelector((state: RootState) => state.alert.message);\r\n\r\n  return (\r\n    <div className=\"has-text-centered\">\r\n      <Header />\r\n      <Search />\r\n      {loading ? (\r\n        <h2 className=\"is-size-3 py-2\">Loading...</h2>\r\n      ) : (\r\n        weatherData && <Weather data={weatherData} />\r\n      )}\r\n      {alertMsg && (\r\n        <Alert message={alertMsg} onClose={() => dispatch(setAlert(\"\"))} />\r\n      )}\r\n      {error && <Alert message={error} onClose={() => dispatch(setError())} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n  WeatherAction,\r\n  WeatherState,\r\n  GET_WEATHER,\r\n  SET_LOADING,\r\n  SET_ERROR,\r\n} from \"../types\";\r\n\r\nconst initialState: WeatherState = {\r\n  data: null,\r\n  loading: false,\r\n  error: \"\",\r\n};\r\n\r\nexport default (state = initialState, action: WeatherAction): WeatherState => {\r\n  switch (action.type) {\r\n    case GET_WEATHER:\r\n      return {\r\n        data: action.payload,\r\n        loading: false,\r\n        error: \"\",\r\n      };\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { AlertState, AlertAction, SET_ALERT } from \"../types\";\r\n\r\nconst initialState: AlertState = {\r\n  message: \"\",\r\n};\r\n\r\nexport default (\r\n  state: AlertState = initialState,\r\n  action: AlertAction\r\n): AlertState => {\r\n  switch (action.type) {\r\n    case SET_ALERT:\r\n      return {\r\n        message: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport weatherReducer from \"./reducers/weatherReducer\";\r\nimport alertReducer from \"./reducers/alertReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n  alert: alertReducer,\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}